name: Claude Check Resolver

on:
  pull_request:
    types: [opened, synchronize]
  schedule:
    # Check every 15 minutes for PRs with failing checks
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to analyze'
        required: false
        type: string

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: read

jobs:
  detect-failing-checks:
    runs-on: ubuntu-latest
    name: 🔍 Detect Failing Checks & Activate Claude
    outputs:
      should-activate-claude: ${{ steps.check-analysis.outputs.should-activate }}
      pr-number: ${{ steps.check-analysis.outputs.pr-number }}
      failing-checks: ${{ steps.check-analysis.outputs.failing-checks }}
    
    steps:
    - name: 🚀 Setup
      uses: actions/checkout@v4
      
    - name: 🔍 Analyze PR Checks
      id: check-analysis
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          let targetPR = null;
          
          if (context.eventName === 'workflow_dispatch' && github.event.inputs.pr_number) {
            // Manual trigger with specific PR
            targetPR = parseInt(github.event.inputs.pr_number);
          } else if (context.eventName === 'pull_request') {
            // Triggered by PR event
            targetPR = context.payload.pull_request.number;
          } else {
            // Scheduled run - find PRs with failing checks
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 10
            });
            
            for (const pr of prs.data) {
              const checks = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha,
                per_page: 100
              });
              
              const failingChecks = checks.data.check_runs.filter(check => 
                check.status === 'completed' && check.conclusion === 'failure'
              );
              
              // Prioritize Copilot PRs with failing checks
              if (failingChecks.length > 0 && pr.user.login.includes('copilot')) {
                targetPR = pr.number;
                break;
              }
            }
          }
          
          if (!targetPR) {
            console.log('❌ No target PR found for check analysis');
            core.setOutput('should-activate', 'false');
            return;
          }
          
          // Get PR details
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: targetPR
          });
          
          // Get checks for this PR
          const checks = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: pr.data.head.sha,
            per_page: 100
          });
          
          const failingChecks = checks.data.check_runs.filter(check => 
            check.status === 'completed' && check.conclusion === 'failure'
          );
          
          const pendingChecks = checks.data.check_runs.filter(check => 
            check.status === 'in_progress' || check.status === 'queued'
          );
          
          // Check if there are existing Claude comments (avoid spam)
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: targetPR
          });
          
          const claudeComments = comments.data.filter(comment => 
            comment.body.includes('@claude') && 
            comment.body.includes('checks failing') &&
            (new Date() - new Date(comment.created_at)) < 2 * 60 * 60 * 1000 // Last 2 hours
          );
          
          console.log(`📊 PR #${targetPR} Analysis:`);
          console.log(`- Failing checks: ${failingChecks.length}`);
          console.log(`- Pending checks: ${pendingChecks.length}`);
          console.log(`- Recent Claude comments: ${claudeComments.length}`);
          console.log(`- PR author: ${pr.data.user.login}`);
          
          // Determine if Claude should be activated
          const shouldActivate = failingChecks.length > 0 && claudeComments.length === 0;
          
          if (shouldActivate) {
            const failingCheckNames = failingChecks.map(check => check.name).join(', ');
            console.log(`✅ Activating Claude for failing checks: ${failingCheckNames}`);
            
            core.setOutput('should-activate', 'true');
            core.setOutput('pr-number', targetPR);
            core.setOutput('failing-checks', failingCheckNames);
          } else {
            console.log('❌ Claude activation not needed');
            core.setOutput('should-activate', 'false');
          }
          
    - name: 📝 Activate Claude for Check Resolution
      if: steps.check-analysis.outputs.should-activate == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const prNumber = ${{ steps.check-analysis.outputs.pr-number }};
          const failingChecks = `${{ steps.check-analysis.outputs.failing-checks }}`;
          
          // Get PR details for context
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: prNumber
          });
          
          const claudeMessage = `🚨 **Claude Check Resolver Activated**

@claude Los checks están fallando en este PR y necesito tu intervención para resolverlos:

📋 **Checks Fallando:**
${failingChecks}

🎯 **Tu misión:**
1. 🔍 Analiza los errores específicos de Codacy/otros checks
2. 🛠️ Proporciona las correcciones exactas necesarias  
3. ✅ Asegúrate de que los checks pasen

📊 **Contexto del PR:**
- **Autor:** ${pr.data.user.login}
- **Título:** ${pr.data.title}
- **Branch:** ${pr.data.head.ref}

🧠 **Estrategia preferida:**
Como establecimos, Codacy detecta → Claude soluciona. 
Proporciona las correcciones específicas para que los checks pasen.

⚡ **Prioridad:** ALTA - Sistema automático activado`;

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: claudeMessage
          });
          
          console.log(`✅ Claude activated for PR #${prNumber}`);
          
    - name: 📊 Summary Report
      if: always()
      run: |
        echo "=== CLAUDE CHECK RESOLVER SUMMARY ==="
        echo "Should Activate Claude: ${{ steps.check-analysis.outputs.should-activate }}"
        if [ "${{ steps.check-analysis.outputs.should-activate }}" = "true" ]; then
          echo "Target PR: #${{ steps.check-analysis.outputs.pr-number }}"
          echo "Failing Checks: ${{ steps.check-analysis.outputs.failing-checks }}"
          echo "Action: Claude comment posted"
        else
          echo "Action: No intervention needed"
        fi
