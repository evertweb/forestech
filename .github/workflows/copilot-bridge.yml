name: Copilot Agent Bridge - Detección de Errores y Delegación

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_error_collection:
        description: 'Forzar recolección de errores incluso si los builds pasan'
        required: false
        default: 'false'

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

jobs:
  build-and-bridge:
    name: Detección de Build y Puente a Copilot
    runs-on: ubuntu-latest

    steps:
    - name: Checkout del Repositorio
      uses: actions/checkout@v4

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Instalar Dependencias
      run: |
        npm ci || echo "Instalación npm raíz falló, continuando..."
        if [ -d "alimentacion" ]; then
          cd alimentacion && npm ci && cd ..
        fi
        if [ -d "combustibles" ]; then
          cd combustibles && npm ci && cd ..
        fi

    - name: 🔍 Detect Build/Lint Errors
      id: error-detection
      run: |
        echo "Running error detection..."
        node scripts/error-collector.js
        
        if [ -f error-context.json ]; then
          ERROR_STATUS=$(node -e "console.log(JSON.parse(require('fs').readFileSync('error-context.json', 'utf8')).status)")
          echo "error-status=$ERROR_STATUS" >> $GITHUB_OUTPUT
          
          if [ "$ERROR_STATUS" = "errors_detected" ]; then
            echo "errors-found=true" >> $GITHUB_OUTPUT
            ERROR_COUNT=$(node -e "console.log(JSON.parse(require('fs').readFileSync('error-context.json', 'utf8')).summary.totalErrors)")
            echo "error-count=$ERROR_COUNT" >> $GITHUB_OUTPUT
            echo "🚨 $ERROR_COUNT errors detected - preparing for Copilot Agent"
          else
            echo "errors-found=false" >> $GITHUB_OUTPUT
            echo "✅ No errors detected"
          fi
        else
          echo "errors-found=false" >> $GITHUB_OUTPUT
          echo "❌ Error detection failed"
        fi
      continue-on-error: true

    - name: 🛡️ Check for Existing Copilot Issues (Anti-Loop Protection)
      if: steps.error-detection.outputs.errors-found == 'true' || github.event.inputs.force_error_collection == 'true'
      id: check-existing-issues
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Anti-loop protection: Check for recent Copilot issues
          const now = new Date();
          const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
          
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'copilot-agent',
            state: 'open',
            since: oneHourAgo.toISOString(),
            per_page: 10
          });
          
          console.log(`🔍 Found ${issues.data.length} recent Copilot issues`);
          
          if (issues.data.length >= 3) {
            console.log('🛡️ ANTI-LOOP PROTECTION: Too many recent Copilot issues');
            core.setOutput('should-skip', 'true');
            core.setOutput('reason', 'rate-limit');
            return;
          }
          
          // Check for issues created in last 10 minutes (immediate duplicates)
          const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);
          const recentIssues = issues.data.filter(issue => 
            new Date(issue.created_at) > tenMinutesAgo
          );
          
          if (recentIssues.length > 0) {
            console.log('🛡️ ANTI-LOOP PROTECTION: Recent issue found, skipping duplicate');
            core.setOutput('should-skip', 'true');
            core.setOutput('reason', 'duplicate');
            core.setOutput('existing-issue', recentIssues[0].number);
            return;
          }
          
          core.setOutput('should-skip', 'false');
          console.log('✅ Safe to create new Copilot issue');

    - name: 🤖 Create and Assign Issue to Copilot Agent
      if: steps.check-existing-issues.outputs.should-skip == 'false'
      id: create-issue
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const fs = require('fs');
            let context = {};
            
            try {
              const contextData = fs.readFileSync('error-context.json', 'utf8');
              context = JSON.parse(contextData);
            } catch (error) {
              console.log('Could not load error context:', error.message);
              context = { summary: { totalErrors: 'Unknown' } };
            }
            
            const issueBody = `## 🚨 Automated Error Detection - Copilot Agent Assignment
            
            Build errors detected: ${context.summary?.totalErrors || 'Multiple'} errors
            
            @github-copilot Please analyze and fix the detected build/lint errors:
            
            1. Review the error-context.json file for specific error details
            2. Create targeted fixes for React/Vite/Firebase patterns
            3. Maintain existing code quality and patterns
            4. Generate a comprehensive pull request with all fixes
            
            Context: ${context.copilotPrompt || 'See error-context.json for details'}
            
            ---
            Auto-generated by Copilot Bridge System`;
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🤖 Copilot Agent: Fix ${context.summary?.totalErrors || 'Multiple'} Build/Lint Errors`,
              body: issueBody,
              labels: ['copilot-agent', 'build-errors', 'automated']
            });
            
            console.log(`✅ Created issue: #${issue.data.number}`);
            core.setOutput('issue-number', issue.data.number);
            
            return issue.data.number;
          } catch (error) {
            console.log(`❌ Failed to create issue: ${error.message}`);
            return null;
          }

    - name: ⚠️ Anti-Loop Protection Warning
      if: steps.check-existing-issues.outputs.should-skip == 'true'
      run: |
        echo "🛡️ ANTI-LOOP PROTECTION ACTIVATED"
        echo "Reason: ${{ steps.check-existing-issues.outputs.reason }}"
        if [ "${{ steps.check-existing-issues.outputs.reason }}" = "duplicate" ]; then
          echo "Existing issue: #${{ steps.check-existing-issues.outputs.existing-issue }}"
          echo "Skipping duplicate issue creation to prevent loops"
        elif [ "${{ steps.check-existing-issues.outputs.reason }}" = "rate-limit" ]; then
          echo "Too many recent Copilot issues detected"
          echo "Rate limiting activated to prevent infinite loops"
        fi
        echo "System remains stable - no new issues created"

    - name: 🤖 Auto-Assign to GitHub Copilot Agent
      if: steps.create-issue.outputs.issue-number
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const issueNumber = ${{ steps.create-issue.outputs.issue-number }};
            
            // Assign to GitHub Copilot Agent using assignees API
            await github.request('POST /repos/{owner}/{repo}/issues/{issue_number}/assignees', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              assignees: ['copilot']
            });
            
            console.log(`✅ Successfully assigned issue #${issueNumber} to GitHub Copilot Agent`);
            
          } catch (error) {
            console.log(`⚠️ Auto-assignment failed: ${error.message}`);
            console.log('Manual assignment may be required');
          }

    - name: ✅ Standard Build & Deploy
      if: steps.error-detection.outputs.errors-found == 'false'
      run: |
        echo "No errors detected - proceeding with standard build and deploy"
        npm run build:alimentacion
        npm run build:combustibles
        
        npm install -g firebase-tools
        echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_LIQUIDACIONAPP_62962 }}' > /tmp/service-account.json
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/service-account.json
        firebase deploy --only hosting --project liquidacionapp-62962
      env:
        VITE_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
        VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
        VITE_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
        VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
        VITE_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}

    - name: 📋 Final Status Report
      if: always()
      run: |
        echo "=== COPILOT BRIDGE FINAL STATUS ==="
        echo "Errors Detected: ${{ steps.error-detection.outputs.errors-found }}"
        echo "Error Count: ${{ steps.error-detection.outputs.error-count }}"
        echo "Copilot Agent: $([ '${{ steps.error-detection.outputs.errors-found }}' = 'true' ] && echo 'Assigned' || echo 'Not needed')"
        echo "Deploy Status: $([ '${{ steps.error-detection.outputs.errors-found }}' = 'false' ] && echo 'Completed' || echo 'Pending fixes')"
