name: Copilot Agent Bridge - Detecci√≥n de Errores y Delegaci√≥n

on:
  # üîÑ NUEVO ORDEN: Solo se ejecuta cuando el deploy falla
  workflow_run:
    workflows: ["Deploy Forestech to Firebase (Optimized)"]
    types:
      - completed
    branches: [main]
  
  # üîß Mantener opci√≥n manual para debugging
  workflow_dispatch:
    inputs:
      force_error_collection:
        description: 'Forzar recolecci√≥n de errores incluso si los builds pasan'
        required: false
        default: 'false'

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

jobs:
  # üõ°Ô∏è Solo ejecutar si el deploy anterior fall√≥
  check-deploy-failure:
    name: Verificar Fallo del Deploy
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'failure' || github.event_name == 'workflow_dispatch'
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - name: üîç Verificar necesidad de intervenci√≥n
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "üîß Ejecuci√≥n manual forzada"
            echo "should-run=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.workflow_run.conclusion }}" == "failure" ]]; then
            echo "‚ùå Deploy fall√≥ - activando Copilot Agent Bridge"
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Deploy exitoso - no se requiere intervenci√≥n"
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi

  build-and-bridge:
    name: Detecci√≥n de Build y Puente a Copilot
    runs-on: ubuntu-latest
    needs: check-deploy-failure
    if: needs.check-deploy-failure.outputs.should-run == 'true'

    steps:
    - name: Checkout del Repositorio
      uses: actions/checkout@v4

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Instalar Dependencias
      run: |
        npm ci || echo "Instalaci√≥n npm ra√≠z fall√≥, continuando..."
        if [ -d "alimentacion" ]; then
          cd alimentacion && npm ci && cd ..
        fi
        if [ -d "combustibles" ]; then
          cd combustibles && npm ci && cd ..
        fi

    - name: üîç Detect Build/Lint Errors
      id: error-detection
      run: |
        echo "Running error detection..."
        node scripts/error-collector.js
        
        if [ -f error-context.json ]; then
          ERROR_STATUS=$(node -e "console.log(JSON.parse(require('fs').readFileSync('error-context.json', 'utf8')).status)")
          echo "error-status=$ERROR_STATUS" >> $GITHUB_OUTPUT
          
          if [ "$ERROR_STATUS" = "errors_detected" ]; then
            echo "errors-found=true" >> $GITHUB_OUTPUT
            ERROR_COUNT=$(node -e "console.log(JSON.parse(require('fs').readFileSync('error-context.json', 'utf8')).summary.totalErrors)")
            echo "error-count=$ERROR_COUNT" >> $GITHUB_OUTPUT
            echo "üö® $ERROR_COUNT errors detected - preparing for Copilot Agent"
          else
            echo "errors-found=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No errors detected"
          fi
        else
          echo "errors-found=false" >> $GITHUB_OUTPUT
          echo "‚ùå Error detection failed"
        fi
      continue-on-error: true

    - name: üõ°Ô∏è Check for Existing Copilot Issues (Anti-Loop Protection)
      if: steps.error-detection.outputs.errors-found == 'true' || github.event.inputs.force_error_collection == 'true'
      id: check-existing-issues
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Anti-loop protection: Check for recent Copilot issues
          const now = new Date();
          const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
          
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'copilot-agent',
            state: 'open',
            since: oneHourAgo.toISOString(),
            per_page: 10
          });
          
          console.log(`üîç Found ${issues.data.length} recent Copilot issues`);
          
          if (issues.data.length >= 3) {
            console.log('üõ°Ô∏è ANTI-LOOP PROTECTION: Too many recent Copilot issues');
            core.setOutput('should-skip', 'true');
            core.setOutput('reason', 'rate-limit');
            return;
          }
          
          // Check for issues created in last 10 minutes (immediate duplicates)
          const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);
          const recentIssues = issues.data.filter(issue => 
            new Date(issue.created_at) > tenMinutesAgo
          );
          
          if (recentIssues.length > 0) {
            console.log('üõ°Ô∏è ANTI-LOOP PROTECTION: Recent issue found, skipping duplicate');
            core.setOutput('should-skip', 'true');
            core.setOutput('reason', 'duplicate');
            core.setOutput('existing-issue', recentIssues[0].number);
            return;
          }
          
          core.setOutput('should-skip', 'false');
          console.log('‚úÖ Safe to create new Copilot issue');

    - name: ü§ñ Create and Assign Issue to Copilot Agent
      if: steps.check-existing-issues.outputs.should-skip == 'false'
      id: create-issue
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const fs = require('fs');
            let context = {};
            
            try {
              const contextData = fs.readFileSync('error-context.json', 'utf8');
              context = JSON.parse(contextData);
            } catch (error) {
              console.log('Could not load error context:', error.message);
              context = { summary: { totalErrors: 'Unknown' } };
            }
            
            const issueBody = `## üö® Detecci√≥n Autom√°tica de Errores - Asignaci√≥n al Agente Copilot
            
            Errores de build detectados: ${context.summary?.totalErrors || 'M√∫ltiples'} errores
            
            @github-copilot Por favor analiza y corrige los errores de build/lint detectados:
            
            **IMPORTANTE: Responde y trabaja EXCLUSIVAMENTE EN ESPA√ëOL**
            
            Tareas a realizar:
            1. Revisar el archivo error-context.json para obtener detalles espec√≠ficos de los errores
            2. Crear correcciones espec√≠ficas siguiendo los patrones React/Vite/Firebase del proyecto
            3. Mantener la calidad y patrones de c√≥digo existentes
            4. Generar un pull request comprensivo con todas las correcciones
            5. Usar comentarios y mensajes de commit en espa√±ol
            
            **Contexto del Proyecto Forestech:**
            - Monorepo React 19 + Vite + Firebase
            - Apps: alimentacion (puerto 5173) y combustibles (puerto 5174)
            - Seguir convenciones establecidas en .github/copilot-instructions.md
            
            Contexto espec√≠fico: ${context.copilotPrompt || 'Ver error-context.json para detalles'}
            
            ---
            Generado autom√°ticamente por el Sistema Copilot Bridge`;
            
            const issue = await github.rest.issues.create({
              owner: github.context.repo.owner,
              repo: github.context.repo.repo,
              title: `ü§ñ Agente Copilot: Corregir ${context.summary?.totalErrors || 'M√∫ltiples'} Errores de Build/Lint`,
              body: issueBody,
              labels: ['copilot-agent', 'errores-build', 'automatizacion']
            });
            
            console.log(`‚úÖ Created issue: #${issue.data.number}`);
            core.setOutput('issue-number', issue.data.number);
            
            return issue.data.number;
          } catch (error) {
            console.log(`‚ùå Failed to create issue: ${error.message}`);
            return null;
          }

    - name: ‚ö†Ô∏è Anti-Loop Protection Warning
      if: steps.check-existing-issues.outputs.should-skip == 'true'
      run: |
        echo "üõ°Ô∏è ANTI-LOOP PROTECTION ACTIVATED"
        echo "Reason: ${{ steps.check-existing-issues.outputs.reason }}"
        if [ "${{ steps.check-existing-issues.outputs.reason }}" = "duplicate" ]; then
          echo "Existing issue: #${{ steps.check-existing-issues.outputs.existing-issue }}"
          echo "Skipping duplicate issue creation to prevent loops"
        elif [ "${{ steps.check-existing-issues.outputs.reason }}" = "rate-limit" ]; then
          echo "Too many recent Copilot issues detected"
          echo "Rate limiting activated to prevent infinite loops"
        fi
        echo "System remains stable - no new issues created"

    - name: ü§ñ Auto-Assign to GitHub Copilot Agent
      if: steps.create-issue.outputs.issue-number
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const issueNumber = ${{ steps.create-issue.outputs.issue-number }};
            
            // Assign to GitHub Copilot Agent using assignees API
            await github.request('POST /repos/{owner}/{repo}/issues/{issue_number}/assignees', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              assignees: ['copilot']
            });
            
            console.log(`‚úÖ Successfully assigned issue #${issueNumber} to GitHub Copilot Agent`);
            
          } catch (error) {
            console.log(`‚ö†Ô∏è Auto-assignment failed: ${error.message}`);
            console.log('Manual assignment may be required');
          }

    - name: ‚úÖ Standard Build & Deploy
      if: steps.error-detection.outputs.errors-found == 'false'
      run: |
        echo "No errors detected - proceeding with standard build and deploy"
        npm run build:alimentacion
        npm run build:combustibles
        
        npm install -g firebase-tools
        echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_LIQUIDACIONAPP_62962 }}' > /tmp/service-account.json
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/service-account.json
        firebase deploy --only hosting --project liquidacionapp-62962
      env:
        VITE_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
        VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
        VITE_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
        VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
        VITE_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}

    - name: ÔøΩ Monitor PR Status and Activate Claude Backup
      if: steps.create-issue.outputs.issue-number
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issueNumber = ${{ steps.create-issue.outputs.issue-number }};
          
          // Wait a bit for Copilot to potentially create PR
          await new Promise(resolve => setTimeout(resolve, 5000));
          
          // Check for recent PRs by Copilot
          const prs = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            per_page: 5
          });
          
          const copilotPR = prs.data.find(pr => 
            pr.user.login.includes('copilot') && 
            (new Date() - new Date(pr.created_at)) < 60 * 60 * 1000 // Last hour
          );
          
          if (copilotPR) {
            console.log(`‚úÖ Copilot created PR #${copilotPR.number}`);
            
            // Add monitoring comment for Claude backup
            const monitorComment = `üîç **Automated PR Monitoring Active**
            
            Este PR ser√° monitoreado autom√°ticamente:
            
            üìä **Criterios de backup Claude:**
            - ‚ùå Si Codacy checks fallan ‚Üí @claude revisar√° y corregir√°
            - ‚è±Ô∏è Si checks tardan >45 min ‚Üí @claude intervendr√°  
            - üö® Si errores persisten ‚Üí @claude proporcionar√° soluciones
            
            üß† **Claude como solucionador de checks:**
            Codacy detecta ‚Üí Claude soluciona ‚Üí Merge cuando est√© OK
            
            ---
            ü§ñ Monitoreo autom√°tico del Copilot Bridge System`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: copilotPR.number,
              body: monitorComment
            });
            
            console.log(`üìù Added monitoring comment to PR #${copilotPR.number}`);
            
            // Schedule check for failing status after reasonable time
            core.setOutput('pr-number', copilotPR.number);
          } else {
            console.log('‚è≥ No Copilot PR found yet, monitoring will continue...');
          }

    - name: ÔøΩüìã Final Status Report
      if: always()
      run: |
        echo "=== COPILOT BRIDGE FINAL STATUS ==="
        echo "Errors Detected: ${{ steps.error-detection.outputs.errors-found }}"
        echo "Error Count: ${{ steps.error-detection.outputs.error-count }}"
        echo "Copilot Agent: $([ '${{ steps.error-detection.outputs.errors-found }}' = 'true' ] && echo 'Assigned' || echo 'Not needed')"
        echo "Deploy Status: $([ '${{ steps.error-detection.outputs.errors-found }}' = 'false' ] && echo 'Completed' || echo 'Pending fixes')"
        if [ "${{ steps.monitor-pr.outputs.pr-number }}" ]; then
          echo "PR Monitoring: Active on #${{ steps.monitor-pr.outputs.pr-number }}"
          echo "Claude Backup: Configured for checks failing"
        fi
