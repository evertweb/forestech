name: GitHub Copilot Agent Integration

on:
  workflow_run:
    workflows: ["Deploy Forestech to Firebase"]
    types:
      - completed
  workflow_call:
    inputs:
      error_context_file:
        description: 'Path to error context JSON file'
        required: false
        type: string
        default: 'error-context.json'
  workflow_dispatch:
    inputs:
      error_context:
        description: 'Error context for Copilot Agent'
        required: false
        default: ''

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

jobs:
  copilot-analysis:
    name: Copilot Agent Analysis
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' || github.event_name == 'workflow_dispatch' }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: ü§ñ Create and Auto-Assign Issue to Copilot Agent
      id: create-issue
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const issueBody = `## ü§ñ Asignaci√≥n Autom√°tica al Copilot Agent
            
            Este issue fue creado autom√°ticamente y asignado al GitHub Copilot Agent
            para solucionar errores del sistema de build de Forestech de forma autom√°tica.
            
            ### Tarea
            Por favor crea un pull request para corregir todos los errores de build y lint detectados.
            
            ### Requisitos
            1. Corregir todos los errores de lint y build detectados por el sistema
            2. Mantener los patrones de c√≥digo existentes y est√°ndares de calidad
            3. Preservar la estructura del monorepo React/Vite/Firebase
            4. Crear soluciones limpias y probadas para cada error
            5. Generar pull request con descripci√≥n detallada
            
            @github-copilot Por favor analiza las fallas de build y crea un pull request comprensivo con las correcciones.
            
            ---
            Auto-generado por GitHub Copilot Agent Integration`;
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ü§ñ Copilot Agent Auto-Fix - Mejoras del Sistema de Build`,
              body: issueBody,
              labels: ['copilot-agent', 'mejora-build', 'automatizacion']
            });
            
            console.log(`‚úÖ Issue creado: #${issue.data.number}`);
            core.setOutput('issue-number', issue.data.number);
            
            return issue.data.number;
          } catch (error) {
            console.log(`‚ùå Failed to create issue: ${error.message}`);
            return null;
          }

    - name: ü§ñ Assign to GitHub Copilot Agent
      if: steps.create-issue.outputs.issue-number
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const issueNumber = ${{ steps.create-issue.outputs.issue-number }};
            
            // Use GitHub Copilot Agent assignment API
            await github.request('POST /repos/{owner}/{repo}/issues/{issue_number}/assignees', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              assignees: ['copilot']
            });
            
            console.log(`‚úÖ Asignaci√≥n exitosa del issue #${issueNumber} al GitHub Copilot Agent`);
            
          } catch (error) {
            console.log(`‚ö†Ô∏è Asignaci√≥n fall√≥: ${error.message}`);
            console.log('Puede ser necesaria asignaci√≥n manual');
          }

    - name: üöÄ Resumen de √âxito
      run: |
        echo "‚úÖ ¬°Integraci√≥n con GitHub Copilot Agent completada exitosamente!"
        echo "ü§ñ Issue creado y asignado al Copilot Agent para correcciones autom√°ticas"
