  name: Deploy Forestech to Firebase

  on:
    workflow_dispatch:

  jobs:
    deploy:
      name: Build and Deploy
      runs-on: ubuntu-latest

      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci
          cd alimentacion && npm ci
          cd ../combustibles && npm ci

      # === ERROR DETECTION & COPILOT BRIDGE ===
      - name: �️ Circuit Breaker - Check Recent Failures
        id: circuit-breaker
        run: |
          echo "Checking for recent workflow failures to prevent loops..."
          
          # Simple circuit breaker: Check if we're in a failure loop
          COMMIT_COUNT=$(git rev-list --count HEAD~5..HEAD 2>/dev/null || echo "0")
          echo "Recent commits: $COMMIT_COUNT"
          
          if [ "$COMMIT_COUNT" -gt "3" ]; then
            echo "⚠️ Multiple recent commits detected - potential loop risk"
            echo "Activating circuit breaker protection"
            echo "circuit-breaker-active=true" >> $GITHUB_OUTPUT
          else
            echo "✅ Circuit breaker: Normal operation"
            echo "circuit-breaker-active=false" >> $GITHUB_OUTPUT
          fi

      - name: �🔍 Error Detection & Analysis
        id: error-check
        if: steps.circuit-breaker.outputs.circuit-breaker-active != 'true'
        run: |
          echo "Checking for build/lint errors..."
          
          # Run error collector to detect issues
          node scripts/error-collector.js
          
          # Check if errors were found
          if [ -f error-context.json ]; then
            ERROR_STATUS=$(node -e "console.log(JSON.parse(require('fs').readFileSync('error-context.json', 'utf8')).status)")
            echo "error-status=$ERROR_STATUS" >> $GITHUB_OUTPUT
            
            if [ "$ERROR_STATUS" = "errors_detected" ]; then
              echo "has-errors=true" >> $GITHUB_OUTPUT
              ERROR_COUNT=$(node -e "console.log(JSON.parse(require('fs').readFileSync('error-context.json', 'utf8')).summary.totalErrors)")
              echo "🚨 $ERROR_COUNT errors detected - will delegate to Copilot Agent"
              exit 1  # Trigger failure to activate Copilot bridge
            else
              echo "has-errors=false" >> $GITHUB_OUTPUT
              echo "✅ No errors detected - proceeding with build"
            fi
          else
            echo "has-errors=false" >> $GITHUB_OUTPUT
            echo "✅ Error detection completed successfully"
          fi
        continue-on-error: false

      - name: � Circuit Breaker Activated
        if: steps.circuit-breaker.outputs.circuit-breaker-active == 'true'
        run: |
          echo "🛡️ CIRCUIT BREAKER ACTIVATED - LOOP PREVENTION"
          echo "Multiple recent commits detected, suggesting potential infinite loop"
          echo "Deploy workflow temporarily suspended to prevent resource waste"
          echo ""
          echo "To resume normal operation:"
          echo "1. Verify the recent commits were intentional"
          echo "2. Wait 1 hour for automatic reset"
          echo "3. Or manually trigger with workflow_dispatch"
          echo ""
          echo "This protection prevents infinite loops caused by:"
          echo "- Copilot Agent creating fixes that trigger new deployments"
          echo "- Automated commits causing recursive workflows"
          echo "- System errors causing repeated failure/fix cycles"
          exit 1

      - name: �📋 Error Summary
        if: failure() && steps.circuit-breaker.outputs.circuit-breaker-active != 'true'
        run: |
          echo "=== BUILD/LINT ERRORS DETECTED ==="
          echo "Timestamp: $(date)"
          echo "Commit: ${{ github.sha }}"
          echo ""
          echo "🔗 Copilot Bridge System will be activated"
          echo "🤖 GitHub Copilot Agent will receive structured error context"
          echo "🎯 Agent will analyze and apply intelligent fixes"
          echo ""
          echo "No predefined fixes - pure AI delegation for maximum flexibility"
          echo ""
          if [ -f error-context.json ]; then
            echo "Error context prepared and ready for Copilot Agent"
            node -e "
              const ctx = JSON.parse(require('fs').readFileSync('error-context.json', 'utf8'));
              if (ctx.summary) {
                console.log('Error Summary:');
                console.log('- Total Errors: ' + ctx.summary.totalErrors);
                console.log('- Unique Files: ' + ctx.summary.uniqueFiles);
                console.log('- Error Types: ' + Object.keys(ctx.summary.byType).join(', '));
              }
            "
          fi

      - name: Build Alimentacion
        if: steps.circuit-breaker.outputs.circuit-breaker-active != 'true'
        run: npm run build:alimentacion

      - name: Build Combustibles
        if: steps.circuit-breaker.outputs.circuit-breaker-active != 'true'
        run: npm run build:combustibles
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to Firebase
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          echo "Configurando credenciales Firebase..."
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_LIQUIDACIONAPP_62962 }}' > /tmp/service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/service-account.json
          
          echo "Verificando archivos build..."
          ls -la public/
          ls -la public/alimentacion/
          ls -la public/combustibles/
          
          echo "Ejecutando deploy Firebase..."
          firebase deploy --only hosting --project liquidacionapp-62962

      - name: Deployment Success
        if: success()
        run: |
          echo "Deploy exitoso!"
          echo "Alimentacion: https://forestechdecolombia.com.co/alimentacion/"
          echo "Combustibles: https://forestechdecolombia.com.co/combustibles/"

      - name: Deployment Failed
        if: failure()
        run: |
          echo "Deploy fallo. Revisa los logs arriba."
          echo "Contacta a Claude para ayuda con el debugging."
